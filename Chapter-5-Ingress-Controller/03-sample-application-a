1. Create a deployment with LoadBalancer Service

vim deployment-1.yaml

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.14.2
        ports:
        - containerPort: 80
        resources:
          limits:
            cpu: 200m
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 100Mi
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-dep-svc
spec:
  type: LoadBalancer
  selector:
    app: nginx
  ports:
    - port: 80
      # By default and for convenience, the `targetPort` is set to
      # the same value as the `port` field.
      targetPort: 80
      # Optional field
      # By default and for convenience, the Kubernetes control plane
      # will allocate a port from a range (default: 30000-32767)

### FILE END HERE

kubectl apply -f deploymentone.yaml
kubectl get deploy
kubectl get rs
kubectl get pods
kubectl get svc

2. Note down the service loadbalancer ingress value
kubectl describe svc nginx-dep-svc

3. Try accessing the application from outside using "loadbalancer ingress" value in your browser

4. Now add a CNAME entry in Route53 - test.aloksrivastava.name = loadbalancer ingress

5. Access the application on - test.aloksrivastava.name


