=== CHANGING RUNTIME TO CONTAINERD

1. Drain the node

kubectl drain <node-to-drain> --ignore-daemonsets

3. Stop kubelet 
systemctl stop kubelet
systemctl stop crio
systemctl disable crio

2. Install Containerd

---
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update

#sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
sudo apt-get install  containerd.io
containerd config default > /etc/containerd/config.toml
sed -i "/SystemdCgroup = false/c\            SystemdCgroup = true" /etc/containerd/config.toml
sudo systemctl restart containerd

---


3. Configure kubelet to use containerd as runtime

vim /var/lib/kubelet/kubeadm-flags.env
--container-runtime-endpoint=unix:///run/containerd/containerd.sock

kubectl edit no node-name

Change - kubeadm.alpha.kubernetes.io/cri-socket: unix:///run/containerd/containerd.sock

4. Restart kubelet

systemctl start kubelet

5. Check with
kubectl get nodes -o wide

optionally you can remove cri-o/docker
